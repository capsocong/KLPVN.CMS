@using CMS.Shared.DTOs.Au.Response
@using CMS.Shared.DTOs.AuClass.Response
@using CMS.WEB.Common
@using CMS.WebAssembly.Components.Admin
@using KLPVN.Core.Helper
@using Newtonsoft.Json
<style>
    .mud-list-item-icon {
        min-width: auto;
    }
</style>

@if (!_isReadPage)
{
}
else{
    <MudPaper Width="250px" Class="py-3" Elevation="0">
        <MudNavMenu>
            <MudStack Row Justify="Justify.SpaceAround" AlignItems="AlignItems.Center">
                <MudItem>
                    <MudText Typo="Typo.h6" Class="px-4">@_user.UserName</MudText>
                    <MudText Typo="Typo.body2" Class="px-4 mud-text-secondary">@String.Join("|", _user.Roles??[])</MudText>
                </MudItem>
                <MudMenu Icon="@Icons.Material.Filled.Settings" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                    <MudMenuItem Icon="@Icons.Material.Filled.ManageAccounts" Href="/thongtintaikhoan">
                        <MudText>Thông tin tài khoản</MudText>
                    </MudMenuItem>
                    <MudMenuItem Icon="@Icons.Material.Filled.LockReset" Href="/changepassword">
                        <MudText>Đổi mật khẩu</MudText>
                    </MudMenuItem>
                    <MudMenuItem OnClick="HandlerLogoutAsync" Icon="@Icons.Material.Filled.Logout" IconColor="Color.Error">
                        <MudText Color="Color.Error">Đăng xuất</MudText>
                    </MudMenuItem>
                </MudMenu>
            </MudStack>
            <MudDivider Class="my-2" />
            <MudNavLink Href="/admin">Dashboard</MudNavLink>
            @foreach(var m in _menu is null ? [] : _menu.Menu)
            {
                <RecursiveRenderMenuTree Menu=@m/>
            }
        </MudNavMenu>
    </MudPaper>
}

@code{
    private UserDecodeAccessToken _user;
    private bool _isReadPage = false;
    private MenuTreeResponse? _menu;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var menuLocalStorage = await Js.InvokeAsync<string?>("localStorage.getItem", "Menu");
            if (menuLocalStorage is not null)
            {
                _menu = JsonConvert.DeserializeObject<MenuTreeResponse>(menuLocalStorage);
                var user = await GetUserDecodeAsync();
                _user = user ?? new UserDecodeAccessToken("Guest", []);
                _isReadPage = true;
                StateHasChanged();
                return;
            }
            var menu = await Client.SendAsync(HttpMethod.GET,
                ConstRequestUri.UserMenu, null, true);
            if (menu is null)
            {
                return;
            }

            if (menu.IsSuccessStatusCode)
            {
                var menuResponse = await menu.Content.DecodeAsync<MenuTreeResponse?>();
                if (menuResponse is null)
                {
                    Snack.Add("Có lỗi xãy ra hãy login lại xem");
                    return;
                }

                _menu = menuResponse;
                var menuJson = JsonConvert.SerializeObject(_menu);
                await Js.InvokeVoidAsync("localStorage.setItem", "Menu", menuJson);
                var user = await GetUserDecodeAsync();
                _user = user ?? new UserDecodeAccessToken("Guest", []);
                _isReadPage = true;
                StateHasChanged();
                return;
            }

            Snack.Add("Có lỗi xãy ra hãy login lại xem");
        }
    }

    private async Task HandlerLogoutAsync()
    {
        try
        {
            var logoutResponseMessage = await Client
                .SendAsync(HttpMethod.POST, ConstRequestUri.AuLogout, null);
            if (logoutResponseMessage is null)
            {
                return;
            }

            if (logoutResponseMessage.IsSuccessStatusCode)
            {
                await Js.InvokeVoidAsync("localStorage.removeItem", "Token");
                await Js.InvokeVoidAsync("localStorage.removeItem", "Refresh");
                await Js.InvokeVoidAsync("localStorage.removeItem", "Menu");
                Navigation.NavigateTo("/login");
            }
            else
            {
                Snack.Add("Có lỗi xãy ra", Severity.Warning);
            }
        }
        catch (Exception ex)
        {
            Snack.Add("Có lỗi server xãy ra", Severity.Error);
        }

    }

    private async Task<UserDecodeAccessToken?> GetUserDecodeAsync()
    {
        var userInforHttpMessage = await Client.SendAsync(HttpMethod.GET, 
            ConstRequestUri.AuUser, null, true);
        if (userInforHttpMessage is null)
        {
            return null;
        }

        if (userInforHttpMessage.IsSuccessStatusCode)
        {
            var user = await userInforHttpMessage.Content.DecodeAsync<UserDecodeAccessToken>();
            return user;
        }

        Snack.Add("Có lỗi xãy ra hãy login lại xem");
        return null;
    }

}