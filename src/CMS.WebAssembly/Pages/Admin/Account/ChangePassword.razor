@page "/changepassword"
@layout CMS.WebAssembly.Layout.Admin.AdminLayout
@using System.ComponentModel.DataAnnotations
@using CMS.Shared.DTOs.User.Request
@using CMS.WEB.Common
@using KLPVN.Core.Helper
@using KLPVN.Core.Models

<style>
    .mud-main-content {
        margin-top : 40px !important
    }
</style>

<PageTitle>Thay đổi mật khẩu</PageTitle>

<MudGrid Class="md-8 px-0 ma-0 mb-4" Spacing="2" Style="width:100%" Justify="Justify.Center">
    <MudItem xs="12" sm="8" md="6" lg="4">
        <MudPaper Elevation="0" Class="pa-2 rounded-3">
            <MudText Class="pb-1" Typo="Typo.h6" Style="font-weight:bold; white-space:nowrap" Align="Align.Center">ĐỔI MẬT KHẨU</MudText>
            <MudForm @ref="form" Model="input">
                <MudTextField Class="mb-4" @bind-Value="input.OldPass" For="(() => input.OldPass)" Required Variant="Variant.Outlined" Margin="Margin.Dense" InputType="@oldPassType" Adornment="Adornment.End" AdornmentIcon="@oldPassIcon" OnAdornmentClick="ShowOldPass" Label="Mật khẩu cũ"></MudTextField>
                <MudTextField Class="mb-4" @bind-Value="input.NewPass" For="(() => input.NewPass)" Required Variant="Variant.Outlined" Margin="Margin.Dense" InputType="@newPassType" Adornment="Adornment.End" AdornmentIcon="@newPassIcon" OnAdornmentClick="ShowNewPass" Label="Mật khẩu mới"></MudTextField>
                <MudTextField Class="mb-4" @bind-Value="input.ConfirmPass" For="(() => input.ConfirmPass)" Required Variant="Variant.Outlined" Margin="Margin.Dense" InputType="@confirmPassType" Adornment="Adornment.End" AdornmentIcon="@confirmPassIcon" OnAdornmentClick="ShowConfirmPass" Label="Xác nhận mật khẩu mới"></MudTextField>
                <MudButton OnClick="ChangePasswordHandlerAsync" Style="text-transform:none" FullWidth Color="Color.Primary" Variant="Variant.Filled" ButtonType="ButtonType.Button">Hoàn tất</MudButton>
            </MudForm>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    [SupplyParameterFromForm]
    InputModel input { get; set; } = new();
    private MudForm form;
    bool isShowOld = false;
    bool isShowNew = false;
    bool isShowConfirm = false;
    InputType oldPassType = InputType.Password;
    InputType newPassType = InputType.Password;
    InputType confirmPassType = InputType.Password;
    string oldPassIcon = Icons.Material.Filled.VisibilityOff;
    string newPassIcon = Icons.Material.Filled.VisibilityOff;
    string confirmPassIcon = Icons.Material.Filled.VisibilityOff;

    void NavToAdmin()
    {
        Navigation.NavigateTo("/admin");
    }

    void ShowOldPass()
    {
        if (isShowOld)
        {
            isShowOld = false;
            oldPassType = InputType.Password;
            oldPassIcon = Icons.Material.Filled.VisibilityOff;
        }
        else
        {
            isShowOld = true;
            oldPassType = InputType.Text;
            oldPassIcon = Icons.Material.Filled.Visibility;
        }
    }

    void ShowNewPass()
    {
        if (isShowNew)
        {
            isShowNew = false;
            newPassType = InputType.Password;
            newPassIcon = Icons.Material.Filled.VisibilityOff;
        }
        else
        {
            isShowNew = true;
            newPassType = InputType.Text;
            newPassIcon = Icons.Material.Filled.Visibility;
        }
    }

    void ShowConfirmPass()
    {
        if (isShowConfirm)
        {
            isShowConfirm = false;
            confirmPassType = InputType.Password;
            confirmPassIcon = Icons.Material.Filled.VisibilityOff;
        }
        else
        {
            isShowConfirm = true;
            confirmPassType = InputType.Text;
            confirmPassIcon = Icons.Material.Filled.Visibility;
        }
    }

    public class InputModel
    {
        [Required(ErrorMessage = "Mật khẩu cũ không được để trống")]
        [DataType(DataType.Password)]
        public string OldPass { get; set; } = "";

        [Required(ErrorMessage = "Mật khẩu mới không được để trống")]
        [DataType(DataType.Password)]
        [StringLength(255, MinimumLength = 7, ErrorMessage = "Mật khẩu phải có trên 7 ký tự")]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{7,}$"
            , ErrorMessage = "Mật khẩu cần ít nhất 1 ký tự thường, 1 ký tự IN HOA, 1 ký tự số, 1 ký tự đặc biệt (@$!%*?&)")]
        public string NewPass { get; set; } = "";

        [Required(ErrorMessage = "Mật khẩu xác nhận không được để trống")]
        [DataType(DataType.Password)]
        [Compare(nameof(NewPass), ErrorMessage = "Mật khẩu mới và xác nhận mật khẩu phải trùng nhau")]
        public string ConfirmPass { get; set; } = "";
    }

    private async Task ChangePasswordHandlerAsync()
    {
        var changePassword = new ChangePasswordRequest(
            input.OldPass, 
            input.NewPass,
            input.ConfirmPass);
        var changePasswordHttpMessage = await Client.SendAsync(
            HttpMethod.PUT,
            ConstRequestUri.UserChangePassword,
            changePassword,
            true
        );
        if (changePasswordHttpMessage is null)
        {
            return;
        }
        if (changePasswordHttpMessage.IsSuccessStatusCode)
        {
            Snack.Add("Thay đổi mật khẩu thành công",Severity.Success);
            NavToAdmin();
            
        }
        else if ((int)changePasswordHttpMessage.StatusCode is >= 400 and < 500)
        {
            var error = await changePasswordHttpMessage.Content.DecodeAsync<ErrorResponse>();
            Snack.Add(error is null ? "Có lỗi xảy ra" : error.Detail, Severity.Warning);
        }
        else
        {
            Snack.Add("Có lỗi xảy ra", Severity.Error);
        }
    }
}
