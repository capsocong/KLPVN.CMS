@page "/feedback"
@using CMS.Shared.Enums
@using CMS.WEB.Common
@using KLPVN.Core.Helper
@layout CMS.WebAssembly.Layout.Admin.AdminLayout

@inject IDialogService DialogService
@inject NavigationManager nav

<PageTitle>Danh sách phản hồi khách hàng</PageTitle>
<MudTable @ref="@_table" RowsPerPage="10" Hover="true" Items="feedbacks" Dense="true" Virtualize="false" FixedHeader="true" Bordered="true" HorizontalScrollbar="true">
    <ToolBarContent>
        <MudItem xs="12" sm="4">
            <MudTextField T="string" Placeholder="Tìm kiếm" Adornment="Adornment.End"
                          AdornmentIcon="@Icons.Material.Filled.Search" OnAdornmentClick="@(async () => await Js.InvokeVoidAsync("alert", "hello"))"
                          Variant="Variant.Outlined" Margin="Margin.Dense"
                          Immediate="true">
                </MudTextField>
        </MudItem>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Ngày</MudTh>
        <MudTh>Họ tên</MudTh>
        <MudTh>Số điện thoại</MudTh>
        <MudTh>Email</MudTh>
        <MudTh>Địa chỉ</MudTh>
        <MudTh>Ghi chú</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Ngày">@context.CreatedDateTime.AddHours(7).ToString("dd/mm/yyyy")</MudTd>
        <MudTd DataLabel="Họ tên">@context.FullName</MudTd>
        <MudTd DataLabel="Số điện thoại">@context.Phone</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
        <MudTd DataLabel="Địa chỉ">@context.Address</MudTd>
        <MudTd DataLabel="Ghi chú">@context.Note</MudTd>
    </RowTemplate>

    <PagerContent>
        <MudPagination SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Class="pa-4"/>
    </PagerContent>
</MudTable>

@code {
    private MudTable<Feedback> _table;
    private IReadOnlyCollection<Feedback> feedbacks;
    protected override async Task OnInitializedAsync()
    {
        var feedBacksMessage = await Client.SendAsync(HttpMethod.GET,
        ConstRequestUri.FeedBacks, null, true);
        if (feedBacksMessage is null)
        {
            return;
        }
        feedbacks = await feedBacksMessage.Content.DecodeAsync<IReadOnlyCollection<Feedback>>() ?? [];
        await base.OnInitializedAsync();
    }
    private void PageChanged(int i)
    {
    _table.NavigateTo(i - 1);
    }

    public class Feedback
    {
        public Guid Id { get; set; }
        public string? FullName { get; set; }
        public string? Phone { get; set; }
        public string? Title { get; set; }
        public string? Email { get; set; }
        public string? Note { get; set; }
        public string? Address { get; set; }
        public DateTimeOffset CreatedDateTime { get; set; }
    }
}
