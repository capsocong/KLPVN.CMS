@page "/articletopic"
@using CMS.Shared.DTOs.Subject.Response
@using CMS.WEB.Common
@using KLPVN.Core.Helper
@using KLPVN.Core.Models
@layout CMS.WebAssembly.Layout.Admin.AdminLayout

@inject IDialogService DialogService

<PageTitle>Danh sách chủ đề</PageTitle>
@if (!_isLoadingData)
{
    <p>Loading....</p>
}
else{
    <MudTable @ref=@_table RowsPerPage="10" Items="_items" Dense="true" Virtualize="false" FixedHeader="true" Bordered="true">
        <ColGroup>
            <col style="width: 2%; " class="pa-0" />
            <col style="width: 2%; " class="pa-0" />
            <col style="width: 10%; " class="pa-0" />
            <col style="width: 1%; " class="pa-0" />
            <col style="width: 0.5%; " class="pa-0" />
        </ColGroup>
        <ToolBarContent>
            <MudTextField T="string" Placeholder="Tìm kiếm" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          Variant="Variant.Outlined" Margin="Margin.Dense"
                          Immediate="true" ></MudTextField>
            <MudSpacer />
            <MudTooltip Text="Tạo chủ đề" Arrow Placement="Placement.End">
                <MudFab OnClick="OpenAddDialog" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Style="width:45px; height:45px"></MudFab>
            </MudTooltip>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Mã chủ đề</MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<AddDialog.Topic, object>(x=>x.DisplayOrder)">Thứ tự hiển thị</MudTableSortLabel></MudTh>
            <MudTh>Tên chủ đề</MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<AddDialog.Topic, object>(x=>x.IsActive)">Trạng thái</MudTableSortLabel></MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
                <MudTd DataLabel="Mã chủ đề">@context.Code</MudTd>
                <MudTd DataLabel="Thứ tự hiển thị">@context.DisplayOrder</MudTd>
                <MudTd DataLabel="Tên chủ đề">@context.Name</MudTd>
                <MudTd DataLabel="Trạng thái">
                    @if (context.IsActive)
                    {
                        <MudChip Size="Size.Small" Variant="Variant.Text" Style="margin: 0px" T="string" Color="Color.Success">Đang hoạt động</MudChip>
                    }
                    else
                    {
                        <MudChip Size="Size.Small" Variant="Variant.Text" Style="margin: 0px" T="string" Color="Color.Error">Không hoạt động</MudChip>
                    }
                </MudTd>
                <MudTd>
                    <MudStack Row>
                        <MudTooltip Text="Sửa" Arrow Placement="Placement.Top">
                            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Edit" OnClick="()=>OpenEditDialog(context)"></MudIconButton>
                        </MudTooltip>
                        <MudTooltip Text="Xóa" Arrow Placement="Placement.Top">
                            <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="()=>OpenDeleteDialog(context)"></MudIconButton>
                        </MudTooltip>
                    </MudStack>
                </MudTd>
        </RowTemplate>

        <PagerContent>
            <MudPagination SelectedChanged="PageChanged" Count="@((_table.GetFilteredItemsCount() + _table.RowsPerPage - 1) / _table.RowsPerPage)" Class="pa-4" />
        </PagerContent>
    </MudTable>
}

@code {
    private List<Subjects> _items;
    private bool _isLoadingData = false;
    private MudTable<Subjects> _table;

    private void PageChanged(int i)
    {
        _table.NavigateTo(i - 1);
    }

    protected override void OnInitialized()
    {
        
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadSubjectAsync();
        }
    }

    private async Task OpenAddDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true};

        var dialog = await DialogService.ShowAsync<AddDialog>("", options);
        var result = await dialog.Result;
        if (result is {Canceled : false})
        {
            await LoadSubjectAsync();
        }
    }

    private async Task OpenEditDialog(Subjects subject)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true};
        var parameters = new DialogParameters()
        {
            { "SubjectId", subject.Id }
        };
        var dialog =  await DialogService.ShowAsync<EditDialog>("", parameters, options);
        var result = await dialog.Result;
        if (result is {Canceled : false, Data: SubjectDetailResponse subjectDetail})
        {
            subject.Code = subjectDetail.Code;
            subject.DisplayOrder = subject.DisplayOrder;
            subject.IsActive = subjectDetail.IsActive;
            subject.Name = subjectDetail.Name;
        }
    }

    private async Task OpenDeleteDialog(Subjects subject)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true};
        var parameter = new DialogParameters()
        {
            { "SubjectId", subject.Id }
        };
        var dialog = await DialogService.ShowAsync<DeleteDialog>("", parameter, options);
        var result = await dialog.Result;
        if (result is { Canceled: false })
        {
            _items.Remove(subject);
        }
    }

    private async Task LoadSubjectAsync()
    {
        var articleMessage = await Client.SendAsync(HttpMethod.GET, ConstRequestUri.GetAllSubject, null, true);
        if (articleMessage is null)
        {
            return;
        }

        if (articleMessage.IsSuccessStatusCode)
        {
            _items = await articleMessage.Content.DecodeAsync<List<Subjects>>() ?? [];
            _isLoadingData = true;
            StateHasChanged();
            return;    
        }
        var errors = await articleMessage.Content.DecodeAsync<ErrorResponse>();
        Snack.Add(errors is null ? "Loadding thất bại" :errors.Detail, Severity.Warning);
    }

}