@using CMS.Shared.DTOs.InfromationOrgaization.Request
@using CMS.WEB.Common
@using KLPVN.Core.Helper
@using KLPVN.Core.Models
<style>
    .mud-button-label {
        text-transform: none;
    }
</style>

<MudDialog>
    <TitleContent>
        <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.Center" Spacing="1" Class="pl-0 pr-4 pt-1">
            <MudText Color="Color.Default" Style="font-weight: bold" Typo="Typo.h6">Thêm Thông Tin</MudText>
        </MudStack>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="form" Model="Input">
            <MudGrid Justify="Justify.FlexStart" Spacing="1">
                <MudItem xs="12">
                    <MudStack Class="d-flex justify-content-center align-items-center mb-2" Style="width: 100%; height: auto;">
                        <MudAvatar Style="width:100px; height:100px">
                            <MudImage Class="center-image" Style="width:100%; height: auto" Src="@_iconUrl" Alt="Icon" />
                        </MudAvatar>
                        <MudFileUpload Accept="image/png, image/jpeg" T="IBrowserFile" FilesChanged="UploadFileInformation">
                            <ActivatorContent>
                                <MudFab Color="Color.Secondary"
                                        StartIcon="@Icons.Material.Filled.Image"
                                        Label="Chọn icon" Style="text-transform: none" />
                            </ActivatorContent>
                        </MudFileUpload>
                    </MudStack>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="Input.Code" For="@(() => Input.Code)" Variant="Variant.Outlined" Margin="Margin.Dense"  Label="Mã"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="Input.OrganizationName" For="@(() => Input.OrganizationName)" Variant="Variant.Outlined" Margin="Margin.Dense"  Label="Tên tổ chức"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="Input.Phone" For="@(() => Input.Phone)" Variant="Variant.Outlined" Margin="Margin.Dense"  Label="Số điện thoại"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="Input.Email" For="@(() => Input.Email)" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Email"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="Input.Address" For="@(() => Input.Address)" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Địa chỉ"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="Input.RefFacebook" For="@(() => Input.RefFacebook)" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Link FaceBook"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="Input.RefYoutube" For="@(() => Input.RefYoutube)" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Link Youtube"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="Input.RefX" For="@(() => Input.RefX)" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Link X"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="Input.RefSocial" For="@(() => Input.RefSocial)" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Link Mạng Xã hội"></MudTextField>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="Input.RefTikTok" For="@(() => Input.RefTikTok)" Variant="Variant.Outlined" Margin="Margin.Dense" Label="Link Tiktok"></MudTextField>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Variant="Variant.Filled">Hủy</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit" Variant="Variant.Filled">Lưu</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    private MudForm form;
    private string _iconUrl;
    public InputModel Input = new InputModel();

    private async Task Submit()
    {
        var createInformationOrRequest = new CreateInformationOrganizationRequest(
                Code:Input.Code,
                OrganizationName:Input.OrganizationName,
                Address:Input.Address,
                Phone:Input.Phone,
                Email:Input.Email,
                Icon:_iconUrl,
                RefFacebook:Input.RefFacebook,
                RefYoutube:Input.RefYoutube,
                RefX:Input.RefX,
                RefSocial:Input.RefSocial,
                RefTikTok:Input.RefTikTok
            );
        var createInforMessage = await Client.SendAsync(HttpMethod.POST,
            ConstRequestUri.PostCreateInformationOrganization, createInformationOrRequest,  true);
        if (createInforMessage is null)
        {
            return;
        }

        if (createInforMessage.IsSuccessStatusCode)
        {
            MudDialog.Close(DialogResult.Ok(0));
            Snack.Add("Thêm mới thành công", Severity.Success);
            return;
        }
        var error = await createInforMessage.Content.DecodeAsync<ErrorResponse>();
        Snack.Add(error is not null ? error.Detail : "Có lỗi xãy ra", Severity.Warning);
    }

    private void Cancel() => MudDialog.Cancel();

    private async Task UploadFileInformation(IBrowserFile file)
    {
        var urlUploadImages = await Client.SendAsync(HttpMethod.GET,
            ConstRequestUri.AuUploadFile, null, true);
        if (urlUploadImages is null)
        {
            return;
        }

        if (urlUploadImages.IsSuccessStatusCode)
        {
            var url = await urlUploadImages.Content.ReadAsStringAsync();
            var sendCloudinaryMessage = await CloudHelper.UploadFileAsync(url, file);
            if (sendCloudinaryMessage.IsSuccess)
            {
                _iconUrl = sendCloudinaryMessage.Data;
                return;
            }
            Snack.Add(sendCloudinaryMessage.Data, Severity.Warning);
            return;
        }
        var error = await urlUploadImages.Content.DecodeAsync<ErrorResponse>();
        Snack.Add(error is not null ? error.Detail : "Có lỗi xãy ra", Severity.Warning);
    }
    public class InputModel
    {
        public string Code { get; set; }
        public string OrganizationName { get; set; } = null!;
        public string Address { get; set; } = null!;
        public string Phone { get; set; } = null!;
        public string? Email { get; set; }
        public string? Icon { get; set; }
        public string? RefFacebook { get; set; }
        public string? RefYoutube { get; set; }
        public string? RefX { get; set; }
        public string? RefSocial { get; set; }
        public string? RefTikTok { get; set; }
        public bool IsActive { get; set; }
    }
}
