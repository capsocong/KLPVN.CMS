@page "/rejectedarticle"

@using CMS.Shared.Enums
@layout CMS.WebAssembly.Layout.Admin.AdminLayout

@inject IDialogService DialogService
@inject NavigationManager nav

<PageTitle>Danh sách bài viết từ chối</PageTitle>

<MudTable Items="articles" Dense="true" Virtualize="false" FixedHeader="true" Bordered="true" HorizontalScrollbar="true">
    <ColGroup>
        <col style="width: 1.5%; " class="pa-0" />
        <col style="width: 10%; " class="pa-0" />
        <col style="width: 10%; " class="pa-0" />
        <col style="width: 1%; " class="pa-0" />
        <col style="width: 10%; " class="pa-0" />
        <col style="width: 0.5%; " class="pa-0" />
    </ColGroup>
    <ToolBarContent>
        <MudTextField T="string" Placeholder="Tìm kiếm" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      Variant="Variant.Outlined" Margin="Margin.Dense"
                      Immediate="true"></MudTextField>
        <MudSpacer />
        <MudTooltip Text="Tạo bài viết" Arrow Placement="Placement.End">
            <MudFab OnClick="OpenAddDialog" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Style="width:45px; height:45px"></MudFab>
        </MudTooltip>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Mã bài viết</MudTh>
        <MudTh>Tiêu đề</MudTh>
        <MudTh>Mô tả</MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Article, object>(x => x.Status)">Trạng thái</MudTableSortLabel></MudTh>
        <MudTh>Ghi chú</MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Mã bài viết">@context.Code</MudTd>
        <MudTd DataLabel="Tiêu đề">@context.Title</MudTd>
        <MudTd DataLabel="Mô tả">@context.Description</MudTd>
        <MudTd DataLabel="Status">
            @if (context.Status == StatusContent.Draft)
            {
                <MudChip Size="Size.Small" Variant="Variant.Text" Style="margin: 0px" T="string" Color="Color.Default">Bản nháp</MudChip>
            }
            @if (context.Status == StatusContent.Waiting)
            {
                <MudChip Size="Size.Small" Variant="Variant.Text" Style="margin: 0px" T="string" Color="Color.Warning">Chờ duyệt</MudChip>
            }
            @if (context.Status == StatusContent.Accepted)
            {
                <MudChip Size="Size.Small" Variant="Variant.Text" Style="margin: 0px" T="string" Color="Color.Success">Đã duyệt</MudChip>
            }
            @if (context.Status == StatusContent.Rejected)
            {
                <MudChip Size="Size.Small" Variant="Variant.Text" Style="margin: 0px" T="string" Color="Color.Error">Từ chối</MudChip>
            }
        </MudTd>
        <MudTd DataLabel="Ghi chú">@context.Comment</MudTd>
        <MudTd>
            <MudStack Row>
                <MudTooltip Text="Sửa" Arrow Placement="Placement.Top">
                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Edit" OnClick="OpenEditDialog"></MudIconButton>
                </MudTooltip>
                <MudTooltip Text="Xóa" Arrow Placement="Placement.Top">
                    <MudIconButton Size="Size.Small" Icon="@Icons.Material.Filled.Delete" OnClick="OpenDeleteDialog"></MudIconButton>
                </MudTooltip>
            </MudStack>
        </MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager HidePageNumber HideRowsPerPage PageSizeOptions="new int[] {10}" />
    </PagerContent>
</MudTable>

@code {
    private List<Article> articles = new List<Article>();

    protected override void OnInitialized()
    {
        Random random = new Random();
        for (int i = 0; i < 30; i++)
        {
            StatusContent status = StatusContent.Rejected;

            articles.Add(new Article
                {
                    Code = "ART" + (i + 1).ToString("D3"),
                    Title = "Tiêu đề bài viết " + (i + 1),
                    Description = "Mô tả chi tiết về bài viết số " + (i + 1),
                    Status = status,
                    Comment = "Bình luận về bài viết số " + (i + 1),
                });
        }
    }

    private void OpenAddDialog()
    {
        nav.NavigateTo("/addarticle");
    }

    private void OpenEditDialog()
    {
        nav.NavigateTo("/employeeeditarticle");
    }

    private Task OpenDeleteDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, FullWidth = true };

        return DialogService.ShowAsync<DeleteDialog>("", options);
    }

    public class Article
    {
        public string Code { get; set; }
        public string Title { get; set; }
        public string? Description { get; set; }
        public StatusContent Status { get; set; }
        public string? Comment { get; set; }
        public bool IsActive { get; set; }
    }

}